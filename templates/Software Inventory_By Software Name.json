{
  "base_template": null,
  "template": {
    "name": "Software Inventory_By Software Name",
    "template_css": "",
    "template_md": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n  <link href=\"https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900|Material+Icons\" rel=\"stylesheet\"\r\n    type=\"text/css\">\r\n  <link href=\"https://cdn.jsdelivr.net/npm/quasar@2.13.1/dist/quasar.prod.css\" rel=\"stylesheet\" type=\"text/css\">\r\n</head>\r\n\r\n<body>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.prod.js\"></script>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/quasar@2.13.1/dist/quasar.umd.prod.js\"></script>\r\n\r\n  <div id=\"q-app\">\r\n    <div id=\"loading\">\r\n    </div>\r\n    {%raw%}\r\n    <q-layout view=\"hHh lpR fFf\">\r\n      <q-page-container class=\"q-ma-sm\">\r\n        <div id=\"container\" style=\"display: none\">\r\n          <div class=\"row justify-center q-my-md\">\r\n            COMPANY LOGO HERE\r\n          </div>\r\n          <div class=\"row justify-center q-mb-lg\">\r\n            <q-form @submit=\"findSoftware()\" class=\"q-gutter-md\">\r\n              <div style=\"width: 400px\">\r\n                <q-input debounce=\"300\" v-model=\"softwareSearchText\" placeholder=\"Search for a software name...\"\r\n                  clearable clear-icon=\"close\" />\r\n              </div>\r\n              <div class=\"float-right q-mt-sm\">\r\n                <q-btn-dropdown split rounded color=\"white\" text-color=\"black\" label=\"Search\" @click=\"findSoftware()\">\r\n                  <q-list>\r\n                    <q-item clickable v-close-popup @click=\"quickFindSoftware('Google Chrome')\">\r\n                      <q-item-section>\r\n                        <q-item-label>Google Chrome</q-item-label>\r\n                      </q-item-section>\r\n                    </q-item>\r\n                    <q-item clickable v-close-popup @click=\"quickFindSoftware('Microsoft 365 Apps')\">\r\n                      <q-item-section>\r\n                        <q-item-label>Microsoft 365 Apps</q-item-label>\r\n                      </q-item-section>\r\n                    </q-item>\r\n                    <q-item clickable v-close-popup @click=\"quickFindSoftware('Microsoft Edge')\">\r\n                      <q-item-section>\r\n                        <q-item-label>Microsoft Edge</q-item-label>\r\n                      </q-item-section>\r\n                    </q-item>\r\n                  </q-list>\r\n                </q-btn-dropdown>\r\n              </div>\r\n              <div class=\"float-left q-mt-sm\">\r\n                <q-toggle v-model=\"generalMatch\" label=\"General\" />\r\n                <q-toggle v-model=\"exactMatch\" label=\"Exact\" />\r\n              </div>\r\n            </q-form>\r\n          </div>\r\n          <q-table ref=\"table\" title=\"Software inventory\" :rows=\"softwareTableRows\" :columns=\"softwareTableColumns\"\r\n            row-key=\"name\" :filter=\"softwareTableFilter\" :pagination=\"softwareTablePagination\"\r\n            :rows-per-page-options=\"[10,25,50,100]\">\r\n            <template v-slot:top-right>\r\n              <div style=\"width: 300px\" v-if=\"Object.keys(softwareTableRows).length > 0\">\r\n                <q-input debounce=\"300\" v-model=\"softwareTableFilter\" placeholder=\"Filter the table below...\" clearable\r\n                  clear-icon=\"close\">\r\n                  <template v-slot:after>\r\n                    <q-btn round dense flat color=\"primary\" icon=\"archive\"\r\n                      @click=\"exportTable(softwareSearchText+' installs')\">\r\n                      <q-tooltip style=\"font-size:12px\">Export table results to a CSV file.</q-tooltip>\r\n                    </q-btn>\r\n                  </template>\r\n                </q-input>\r\n              </div>\r\n            </template>\r\n            <template v-slot:body=\"props\">\r\n              <q-tr :props=\"props\" @click=\"agentTableRowClick(props.row)\">\r\n                <q-td key=\"client\" :props=\"props\">\r\n                  {{ props.row.client }}\r\n                </q-td>\r\n                <q-td key=\"site\" :props=\"props\">\r\n                  {{ props.row.site }}\r\n                </q-td>\r\n                <q-td key=\"hostname\" :props=\"props\">\r\n                  {{ props.row.hostname }}\r\n                </q-td>\r\n                <q-td key=\"lastUser\" :props=\"props\">\r\n                  {{ props.row.lastUser }}\r\n                </q-td>\r\n                <q-td key=\"softwarePublisher\" :props=\"props\">\r\n                  {{ props.row.softwarePublisher }}\r\n                </q-td>\r\n                <q-td key=\"softwareName\" :props=\"props\">\r\n                  {{ props.row.softwareName }}\r\n                </q-td>\r\n                <q-td key=\"softwareVersion\" :props=\"props\">\r\n                  {{ props.row.softwareVersion }}\r\n                </q-td>\r\n                <q-td key=\"softwareSize\" :props=\"props\">\r\n                  {{ props.row.softwareSize }}\r\n                </q-td>\r\n                <q-td key=\"softwareInstallDate\" :props=\"props\">\r\n                  {{ props.row.softwareInstallDate }}\r\n                </q-td>\r\n              </q-tr>\r\n            </template>\r\n          </q-table>\r\n      </q-page-container>\r\n    </q-layout>\r\n    {%endraw%}\r\n  </div>\r\n\r\n  <script>\r\n    const { ref, watch } = Vue\r\n    const softwareTableColumns = [\r\n      { name: 'client', align: 'left', label: 'Client Name', field: 'client', sortable: true },\r\n      { name: 'site', align: 'left', label: 'Site Name', field: 'site', sortable: true },\r\n      {\r\n        name: 'hostname',\r\n        required: true,\r\n        label: 'Agent',\r\n        align: 'left',\r\n        field: row => row.hostname,\r\n        format: val => `${val}`,\r\n        sortable: true\r\n      },\r\n      { name: 'lastUser', align: 'left', label: 'User', field: 'lastUser', sortable: true },\r\n      { name: 'softwarePublisher', align: 'left', label: 'Publisher', field: 'softwarePublisher', sortable: false },\r\n      { name: 'softwareName', align: 'left', label: 'Name', field: 'softwareName', sortable: true },\r\n      { name: 'softwareVersion', align: 'left', label: 'Version', field: 'softwareVersion', sortable: true },\r\n      { name: 'softwareSize', align: 'left', label: 'Size', field: 'softwareSize', sortable: false },\r\n      { name: 'softwareInstallDate', align: 'left', label: 'Install Date', field: 'softwareInstallDate', sortable: true },\r\n    ]\r\n    let softwareTableRows = ref([])\r\n\r\n    const app = Vue.createApp({\r\n      setup () {\r\n          let now = ref(null)\r\n          let generalMatch = ref(true)\r\n          let exactMatch = ref(false)\r\n          let tableLoading = ref(false)\r\n          let loaded = ref(false)\r\n          let agentSoftware = {{data_sources.agentsSoftware}}\r\n          let softwareSearchText = ref('')\r\n          let softwareTableFilter = ref('')\r\n\r\n          function populateSoftwareTableRows (genMatch, exMatch) {\r\n            let queryStrings = softwareSearchText.value.toLowerCase().split(',');\r\n            if (genMatch){\r\n              for (const agent of agentSoftware){\r\n                agent.software.filter(function (el) {\r\n                  installDate = new Date(el.install_date)\r\n                  var arrayLength = queryStrings.length;\r\n                  let matched = false;\r\n                  for (var i = 0; i < arrayLength; i++) {\r\n                    queryString = queryStrings[i];\r\n                    isNegative = queryString.startsWith(\"-\");\r\n                    if (!isNegative && el.name.toLowerCase().includes(queryString)) {\r\n                      matched = true;\r\n                    }\r\n                    if (isNegative && el.name.toLowerCase().includes(queryString.slice(1))) {\r\n                      matched = false;\r\n                      break;\r\n                    }\r\n                  }\r\n                  if (matched) {\r\n                    let agentObj ={\r\n                        softwareName: el.name,\r\n                        softwareInstallDate: installDate.toLocaleString(\"en-US\", {\r\n                          timeZone: \"America/Los_Angeles\",\r\n                          month: \"short\",\r\n                          day: \"2-digit\",\r\n                          year: \"numeric\"\r\n                        }),\r\n                        softwareLocation: el.location,\r\n                        softwarePublisher: el.publisher,\r\n                        softwareSize: el.size,\r\n                        softwareVersion: el.version,\r\n                        softwareUninstall: el.uninstall,\r\n                        hostname: agent.agent__hostname,\r\n                        client: agent.agent__site__client__name,\r\n                        site: agent.agent__site__name,\r\n                        lastUser: agent.agent__last_logged_in_user\r\n                      }\r\n                      softwareTableRows.value.push(agentObj)\r\n                  }\r\n                });\r\n              }\r\n            }else{\r\n              for (const agent of agentSoftware){\r\n                agent.software.filter(function (el) {\r\n                  installDate = new Date(el.install_date)\r\n                  if(el.name.toLowerCase() == softwareSearchText.value.toLowerCase()){\r\n                      let agentObj ={\r\n                        softwareName: el.name,\r\n                        softwareInstallDate: installDate.toLocaleString(\"en-US\", {\r\n                          timeZone: \"America/Los_Angeles\",\r\n                          month: \"short\",\r\n                          day: \"2-digit\",\r\n                          year: \"numeric\"\r\n                        }),\r\n                        softwareLocation: el.location,\r\n                        softwarePublisher: el.publisher,\r\n                        softwareSize: el.size,\r\n                        softwareVersion: el.version,\r\n                        softwareUninstall: el.uninstall,\r\n                        hostname: agent.agent__hostname,\r\n                        client: agent.agent__site__client__name,\r\n                        site: agent.agent__site__name,\r\n                        lastUser: agent.agent__last_logged_in_user\r\n                      }\r\n                      softwareTableRows.value.push(agentObj)\r\n                    }\r\n                });\r\n              }\r\n            }\r\n\r\n            softwareTableRows.value = softwareTableRows.value.filter((v,i,a)=>a.findIndex(v2=>(v2.hostname===v.hostname&&v2.softwareName===v.softwareName && v2.softwareVersion===v.softwareVersion))===i)\r\n          }\r\n\r\n          function findSoftware(){\r\n            if (softwareSearchText.value && generalMatch.value == true){\r\n              softwareTableRows.value = []\r\n              populateSoftwareTableRows (generalMatch.value, exactMatch.value)\r\n\r\n            }else if(softwareSearchText.value && exactMatch.value == true){\r\n              softwareTableRows.value = []\r\n              populateSoftwareTableRows (generalMatch.value, exactMatch.value)\r\n\r\n            }else{\r\n              Quasar.Notify.create({\r\n                message: \"Please fill in the search field.\",\r\n                position: \"top\",\r\n                closeBtn: true,\r\n                color: \"positive\"\r\n              })\r\n            }\r\n          }\r\n\r\n          function quickFindSoftware(searchText){\r\n            if (searchText && generalMatch.value == true){\r\n              softwareSearchText.value = searchText\r\n              softwareTableRows.value = []\r\n              populateSoftwareTableRows(generalMatch.value, exactMatch.value)\r\n              \r\n            }else if(searchText && exactMatch.value == true){\r\n              softwareSearchText.value = searchText\r\n              softwareTableRows.value = []\r\n              populateSoftawreTableRows(generalMatch.value, exactMatch.value)\r\n\r\n            }else{\r\n              Quasar.Notify.create({\r\n                message: \"Please fill in the search field.\",\r\n                position: \"top\",\r\n                closeBtn: true,\r\n                color: \"positive\"\r\n              })\r\n            }\r\n          }\r\n\r\n          function wrapCsvValue (val, formatFn, row) {\r\n            let formatted = formatFn !== void 0\r\n              ? formatFn(val, row)\r\n              : val\r\n\r\n            formatted = formatted === void 0 || formatted === null\r\n              ? ''\r\n              : String(formatted)\r\n\r\n            formatted = formatted.split('\"').join('\"\"')\r\n            /**\r\n             * Excel accepts \\n and \\r in strings, but some other CSV parsers do not\r\n             * Uncomment the next two lines to escape new lines\r\n             */\r\n            // .split('\\n').join('\\\\n')\r\n            // .split('\\r').join('\\\\r')\r\n\r\n            return `\"${formatted}\"`\r\n          }\r\n\r\n          function exportTable () {            \r\n            const content = [softwareTableColumns.map(col => wrapCsvValue(col.label))].concat(\r\n              this.$refs.table.filteredSortedRows.map(row => softwareTableColumns.map(col => wrapCsvValue(\r\n                typeof col.field === 'function'\r\n                  ? col.field(row)\r\n                  : row[ col.field === void 0 ? col.name : col.field ],\r\n                col.format,\r\n                row\r\n              )).join(','))\r\n            ).join('\\r\\n')\r\n\r\n            now.value = (new Date()).toLocaleString(\"en-US\", {\r\n                        timeZone: \"America/Los_Angeles\",\r\n                        hour24: true,\r\n                        month: \"short\",\r\n                        day: \"2-digit\",\r\n                        year: \"numeric\",\r\n                        hour: \"2-digit\",\r\n                        minute: \"2-digit\",\r\n                        second: \"2-digit\"\r\n                      });\r\n            let newFilename = ''\r\n            if(softwareTableFilter.value){\r\n              newFilename = softwareSearchText.value+'-'+softwareTableFilter.value+'-'+now.value+'.csv'\r\n            }else{\r\n              newFilename = softwareSearchText.value+'-'+now.value+'.csv'\r\n            }\r\n            var csvFile;\r\n            var downloadLink;\r\n            csvFile = new Blob([content], {type: \"text/csv\"});\r\n            downloadLink = document.createElement(\"a\");\r\n            downloadLink.download = newFilename;\r\n            downloadLink.href = window.URL.createObjectURL(csvFile);\r\n            downloadLink.style.display = \"none\";\r\n            document.body.appendChild(downloadLink);\r\n\r\n            downloadLink.click();\r\n\r\n            Quasar.Notify.create({\r\n              message: newFilename+' has been downloaded.',\r\n              position: \"top\",\r\n              closeBtn: true,\r\n              color: \"positive\"\r\n            })\r\n          }\r\n\r\n          Vue.watch(loaded, (newValue) => {\r\n            if (newValue) {\r\n              document.getElementById(\"loading\").style.display = 'none'\r\n              document.getElementById(\"container\").style.display = 'block'\r\n            }\r\n          })\r\n\r\n          Vue.watch(softwareSearchText, (newValue) => {\r\n\r\n            if (newValue != softwareSearchText){\r\n              softwareTableFilter.value = ''\r\n            }\r\n          })\r\n\r\n          Vue.watch(exactMatch, (newValue) => {\r\n            if (newValue){\r\n              generalMatch.value = false\r\n            }else if(!newValue){\r\n              generalMatch.value = true\r\n            }\r\n          })\r\n\r\n          Vue.watch(generalMatch, (newValue) => {\r\n            if (newValue){\r\n              exactMatch.value = false\r\n            }else if(!newValue){\r\n              exactMatch.value = true\r\n            }\r\n          })\r\n\r\n          loaded.value = true\r\n\r\n          return {\r\n            softwareTablePagination: {\r\n            sortBy: 'lastUser',\r\n            page: 1,\r\n            rowsPerPage: 100\r\n            },\r\n            now,\r\n            generalMatch,\r\n            exactMatch,\r\n            loaded,\r\n            findSoftware,\r\n            quickFindSoftware,\r\n            softwareTableFilter,\r\n            softwareSearchText,\r\n            softwareTableColumns,\r\n            softwareTableRows,\r\n            wrapCsvValue,\r\n            exportTable\r\n          }\r\n        }\r\n      })\r\n      app.use(Quasar)\r\n      app.mount('#q-app')\r\n  </script>\r\n</body>\r\n\r\n</html>",
    "type": "html",
    "depends_on": [],
    "template_variables": "data_sources:\r\n  agentsSoftware: \r\n    json: true\r\n    model: installedsoftware\r\n    select_related:\r\n      - agent__hostname\r\n    only:\r\n      - software\r\n      - agent__hostname\r\n      - agent__last_logged_in_user\r\n      - agent__site__client__name\r\n      - agent__site__name\r\n    order_by:\r\n      - agent__hostname"
  },
  "assets": []
}